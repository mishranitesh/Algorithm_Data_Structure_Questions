Given a 32-bit signed integer, reverse digits of an integer.
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
Input: 123
Output: 321
Input: -123
Output: -321
Input: 120
Output: 21
Input: 1534236469
Output: 0

-------------------------------------------------------------------------------------------------------------

class Solution {
public:
    int reverse(int x) {
        
        std::string str_num = std::to_string(abs(x));
        
        std::reverse(str_num.begin(), str_num.end());
        if (x < 0) {
            str_num.insert(0, 1, '-');
        }
        
        int ret_num;
        
        try {
            ret_num = std::stoi(str_num);
        } catch(std::out_of_range e) {
            return 0;
        }
        
        /*if (ret_num > INT_MAX || ret_num < INT_MIN) {
            return 0;
        }*/
        
        return ret_num;
    }
};

-------------------------------------------------------------------------------------------------------------